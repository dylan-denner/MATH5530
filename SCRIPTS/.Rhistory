pmf_x[0]
pmf_x[1]
pmf_x[2]
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
dbinom(0,2,.6)
joint_pmf[2,]
dbinom(0,4,.6)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
?sum
sum(joint_pmf[,2])
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
?append
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
?colSums()
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
colSums(joint_pmf, na.rm = TRUE, dims = 1)
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
rowSums(joint_pmf, na.rm = TRUE, dims = 1)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
sum(pmf_y)
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
?colnames
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
View(joint_pmf)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
a <- 2
a <- a + 4
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
#answer_c_pt2 <- vector(mode = "numeric", length = 5)
answer_c_pt2 <- rowSums(joint_pmf, na.rm = TRUE, dims = 1)
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
source('~/R/MATH5500/HW5/Ex5_6/EX_5_6.R')
install.packages("ISLR")
library(ISLR)
summary(ISLR)
library("ISLR")
summary(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
AUto=read.table("Auto.data")
install.packages("installr")
library(installr)
updateR()
mean(1,2)
average
?mean
mean(list(1,2))
x <- 105.9 + 90.9+91.2+96.9+96.5+91.3+100.1+105+99.6+107.7+103.3+92.4
x/12
x <- 105.9^2 + 90.9+91.2+96.9+96.5+91.3+100.1+105+99.6+107.7+103.3+92.4
?vector
x <- c(105.9, 90.9, 91.2, 96.9, 96.5, 91.3, 100.1, 105, 99.6, 107.7, 103.3, 92.4)
mean(x)
mean(x^2)
mean(x^2)/12
sd(x)
?t.test
x = as.numeric(c(94,85,71,77,89,69,83,92,96,74))
t.test(x, alternative = "greater", mu = 75, conf.level = 0.95)
z.test(x, alternative = "greater", mu = 75, conf.level = 0.95)
x.bar = mean(x)
x = as.numeric(c(94,85,71,77,89,69,83,92,96,74))
x.bar = mean(x)
sigma = sd(x)
z = (x.bar-75)/(sigma/(sqrt(10)))
?qqtile
qnorm(z)
?qnorm
qnorm(x, 75, sigma, lower.tail = FALSE)
sigma/(swrt(10))
sigma/(sqrt(10))
75-(1.96*(3.105551))
75+(1.96*(3.105551))
83-(1.96*(3.105551))
83+(1.96*(3.105551))
x = as.numeric(c(20,23,25,22,26,23,16,20,21))
x.bar = mean(x)
x = as.numeric(c(20,23,25,22,26,26,23,16,20,21))
x.bar = mean(x)
sig = sd(x)/sqrt(10)
x.bar-21/sig
21+1.833*sig
21-1.833*sig
install.packages("esquisse")
x <- 10
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 100000
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 10000
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 1000
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 10000
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 1000
a <- 1.2^x
b <- x/(log(x))
c <- x^1/2 + ((1/8)*factorial(x))
d <- (x*log(x))+x^9
e <- ((x)^1/3)*log(x)
f <- 11*((log(x)^2))
g <- 5*x^2 + 2*log(x)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g))
View(df)
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
View(df)
x <- 10000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
names(df)[1] <- "Values"
ordered <- df[order(Values)]
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
names(df)[1] <- "Values"
ordered <- df[order(Values),]
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
names(df)[1] <- "Values"
ordered <- df[order("Values"),]
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
names(df)[1] <- "Values"
ordered <- df[order(df$Values),]
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- as.data.frame(c(a,b,c,d,e,f,g), c("a", "b", "c", "d", "e", "f", "g"))
names(df)[1] <- "Values"
ordered <- as.data.frame(df[order(df$Values),])
View(ordered)
df <- as.data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
View(df)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
names(df)[1] <- "Values"
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
names(df)[1] <- "Values"
ordered <- as.data.frame(df[order(df$Values),])
View(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^(1/3))*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- (x^(1/3))*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
View(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^1/2) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^(1/2)) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^1/3)*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
x <- 1000
a <- (1.2)^x
b <- (x)/(log(x))
c <- ((x)^(1/2)) + ((1/8)*(factorial(x)))
d <- (x*log(x))+((x)^9)
e <- ((x)^(1/3))*(log(x))
f <- 11*((log(x))^2)
g <- (5*((x)^2)) + (2*(log(x)))
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f", "g"), "Values" = c(a,b,c,d,e,f,g))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
n <- 1000
a <- (2*n)/(log2(n))
b <- 3*((n)^(2.5))
c <- log2(n)+((1.5)^n)
d <- ((5*(n^2))*(log2(n)))+n
e <- sqrt(n) + 0.5*(factorial(n))
f <- d*((log2(n))^2)
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f"), "Values" = c(a,b,c,d,e,f))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
n <- 1000
a <- (2*n)/(log2(n))
b <- 3*(n^(2.5))
c <- log2(n)+((1.5)^n)
d <- ((5*(n^2))*(log2(n)))+n
e <- sqrt(n) + 0.5*(factorial(n))
f <- d*((log2(n))^2)
df <- data.frame("function" = c("a", "b", "c", "d", "e", "f"), "Values" = c(a,b,c,d,e,f))
ordered <- as.data.frame(df[order(df$Values),])
print(ordered)
?qnorm
?z.test
??z.test
?var
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
plot(x,y)
lm <- lm(y ~ x)
summary(lm)
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
lm <- lm(y ~ x)
summary(lm)
abline(lm)
x_mod <- x - mean(x)
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
abline(lm_mod)
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
abline(lm_mod)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
plot(x_mod, y)
abline(lm_mod)
par(mfrow=c(1,2))
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
lm <- lm(y ~ x)
plot(x,y)
abline(lm)
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
plot(x_mod, y)
abline(lm_mod)
par(mfrow=c(1,2))
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
lm <- lm(y ~ x)
summary(lm)
plot(x,y)
abline(lm)
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
plot(x_mod, y)
abline(lm_mod)
par(mfrow=c(1,2))
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
lm <- lm(y ~ x)
summary(lm)
plot(x,y, main = "y ~ x")
abline(lm)
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
plot(x_mod, y, main = "y ~ (x - x_bar)"
abline(lm_mod)
par(mfrow=c(1,2))
x = as.numeric(c(0.05, 0.1, 0.11, 0.12, 0.31, 0.37, 0.42, 0.58, 0.68, 0.68, 0.73, 0.85, 0.92))
y = as.numeric(c(0.48, 0.55, 0.48, 0.50, 0.58, 0.52, 1.02, 0.86, 0.86, 1.0, 0.88, 1.04, 1.7))
lm <- lm(y ~ x)
summary(lm)
plot(x,y, main = "y ~ x")
abline(lm)
x_mod <- x - mean(x)
lm_mod <- lm(y ~ x_mod)
summary(lm_mod)
plot(x_mod, y, main = "y ~ (x - x_bar)")
abline(lm_mod)
install.packages("rgl")
library(rgl)
?surface3d
source('~/.active-rstudio-document')
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
source('~/.active-rstudio-document')
data(volcano)
force(volcano)
?surface3d
data(volcano)
force(volcano)
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
?bptest
source('~/R/MATH5530/Project/MATH5530/SCRIPTS/Analysis2.R')
source('~/R/MATH5530/Project/MATH5530/SCRIPTS/Analysis2.R')
source('~/R/MATH5530/Project/MATH5530/SCRIPTS/Analysis2.R')
source('~/R/MATH5530/Project/MATH5530/SCRIPTS/Analysis2.R')
source('~/R/MATH5530/Project/MATH5530/SCRIPTS/Analysis2.R')
shapiro.test(ENROLLMENT_sresid2)
?boxcox
