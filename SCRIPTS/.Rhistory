ylab("Educational Attainment %")
plot2 <- ggplot(mod_model_data, aes(x= mean_enrollment, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Modified: Mean Enrollment vs. Educational Attainment %") +
xlab("Mean Enrollment") +
ylab("Educational Attainment %")
grid.arrange(plot1, plot2)
ggplot(model_data, aes(x=poverty_percentage, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Poverty % vs. Educational Attainment %") +
xlab("Poverty %") +
ylab("Educational Attainment %")
p <- ggplot(model_data, aes(x=poverty_percentage, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Poverty % vs. Educational Attainment %") +
xlab("Poverty %") +
ylab("Educational Attainment %")
# Poverty % vs. Educational Attainment %
plot1 <- ggplot(model_data, aes(x=poverty_percentage, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Poverty % vs. Educational Attainment %") +
xlab("Poverty %") +
ylab("Educational Attainment %")
plot2 <- ggplot(mod_model_data, aes(x=poverty_percentage, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Modified: Poverty % vs. Educational Attainment %") +
xlab("Poverty %") +
ylab("Educational Attainment %")
grid.arrange(plot1, plot2)
View(model_data)
x = as.numeric(c(42, 52, 38, 51, 55, 66, 62, 45, 45, 55, 66, 15, 69, 28, 114))
y = as.numeric(c(-0.106, 0.397, 0.016, 0.373, 0.022, 0.419, 0.097, 0.52, 0.149, 0.75, 0.248, 0.577, 0.219, 0.716, 0.362, 0.788))
x = as.numeric(c(42, 52, 38, 51, 55, 66, 62, 45, 45, 43, 55, 66, 15, 69, 28, 114))
ans <- 0.00626*x + 0.01574
x = as.numeric(c(9,12,12,15,18,18,21,21,27,30,33))
y = as.numeric(c(11,12,23,30,29,52,41,65,60,72,84,93))
plot(x,y)
x = as.numeric(c(9,12,12,15,18,18,21,21,27,30, 30,33))
y = as.numeric(c(11,12,23,30,29,52,41,65,60,72,84,93))
plot(x,y)
sum_xi <- 246
sum_yi <- 572
sum_xi2 <- 5742
sum_yi2 <- 35634
sum_xiyi <- 14022
b1 <- sum_xiyi - (sum_xi*sum_yi)/12
b1 <- sum_xiyi - (sum_xi*sum_yi)/12
b0 <- (sum_yi-(b1*sum_xi))/12
sum_xi <- 246
sum_yi <- 572
sum_xi2 <- 5742
sum_yi2 <- 35634
sum_xiyi <- 14022
n <- 12
Sxy <- sum_xiyi - ((sum_xi*sum_yi)/n)
Sxx <- sum_xi2 - (sum_xi^2)/n
b1 <- Sxy/Sxx
b0 <- (sum_yi-(b1*sum_xi))/12
SSE <- sum_yi2 - (b0*sum_yi) - (b1*sum_xiyi)
knitr::opts_chunk$set(echo = TRUE)
head(poverty_by_sex_edu_attainment)
setwd("C:/Users/dylan/Documents/R/MATH5530/Project/MATH5530/SCRIPTS/")
library(dplyr)
library(tidycensus)
library(tidyverse)
library(tidyr)
library(readxl)
library(lemon)
knit_print.data.frame <- lemon_print
library(tidycensus)
poverty_by_sex_edu_attainment <- get_acs(
geography = "school district (unified)",
variables = c(total_population = "B17003_001",
below_poverty_num = "B17003_002",
below_poverty_num_men = "B17003_003",
M_below_poverty_less_than_HS = "B17003_004",
M_below_poverty_HS = "B17003_005",
M_below_poverty_some_college = "B17003_006",
M_below_poverty_bachelor_plus = "B17003_007",
below_poverty_num_women = "B17003_008",
W_below_poverty_less_than_HS = "B17003_009",
W_below_poverty_HS = "B17003_010",
W_below_poverty_some_college = "B17003_011",
W_below_poverty_bachelor_plus = "B17003_012",
above_poverty_num = "B17003_013",
above_poverty_num_men = "B17003_014",
M_above_poverty_less_than_HS = "B17003_015",
M_above_poverty_HS = "B17003_016",
M_above_poverty_some_college = "B17003_017",
M_above_poverty_bachelor_plus = "B17003_018",
above_poverty_num_women = "B17003_019",
W_above_poverty_less_than_HS = "B17003_020",
W_above_poverty_HS = "B17003_021",
W_above_poverty_some_college = "B17003_022",
W_above_poverty_bachelor_plus = "B17003_023"),
state = "OH",
year = 2019)
head(poverty_by_sex_edu_attainment)
dim(poverty_by_sex_edu_attainment)
unique(poverty_by_sex_edu_attainment$NAME)
length(unique(poverty_by_sex_edu_attainment$NAME))
head(poverty_by_sex_edu_attainment)
dim(poverty_by_sex_edu_attainment)
length(unique(poverty_by_sex_edu_attainment$NAME))
setwd("C:/Users/dylan/Documents/R/MATH5530/Project/MATH5530/SCRIPTS/")
library(dplyr)
library(tidycensus)
library(tidyverse)
library(tidyr)
library(readxl)
library(lemon)
knit_print.data.frame <- lemon_print
library(tidycensus)
poverty_by_sex_edu_attainment <- get_acs(
geography = "school district (unified)",
variables = c(total_population = "B17003_001",
below_poverty_num = "B17003_002",
below_poverty_num_men = "B17003_003",
M_below_poverty_less_than_HS = "B17003_004",
M_below_poverty_HS = "B17003_005",
M_below_poverty_some_college = "B17003_006",
M_below_poverty_bachelor_plus = "B17003_007",
below_poverty_num_women = "B17003_008",
W_below_poverty_less_than_HS = "B17003_009",
W_below_poverty_HS = "B17003_010",
W_below_poverty_some_college = "B17003_011",
W_below_poverty_bachelor_plus = "B17003_012",
above_poverty_num = "B17003_013",
above_poverty_num_men = "B17003_014",
M_above_poverty_less_than_HS = "B17003_015",
M_above_poverty_HS = "B17003_016",
M_above_poverty_some_college = "B17003_017",
M_above_poverty_bachelor_plus = "B17003_018",
above_poverty_num_women = "B17003_019",
W_above_poverty_less_than_HS = "B17003_020",
W_above_poverty_HS = "B17003_021",
W_above_poverty_some_college = "B17003_022",
W_above_poverty_bachelor_plus = "B17003_023"),
state = "OH",
year = 2019)
head(poverty_by_sex_edu_attainment)
dim(poverty_by_sex_edu_attainment)
length(unique(poverty_by_sex_edu_attainment$NAME))
poverty_by_sex_edu_attainment <- select(
poverty_by_sex_edu_attainment,
-"moe",
-"GEOID"
)
poverty_by_sex_edu_attainment <- spread(poverty_by_sex_edu_attainment, variable, estimate)
head(poverty_by_sex_edu_attainment)
dim(poverty_by_sex_edu_attainment)
###################################################################
#
#   MATH 5530
#
#   Dylan Denner & Jackson Tucker
#   dd575213@ohio.edu & jt070017@ohio.edu
#   03/30/2021
#
#   Overview:
#   Assumption checks and corrections
#
###################################################################
# Working directory
setwd("C:/Users/dylan/Documents/R/MATH5530/Project/MATH5530/SCRIPTS/")
###################################################################
# Start program run time
start.time <- Sys.time()
###################################################################
library(dplyr)
library(boot)
library(splines)
#library(tidycensus)
#library(tidyverse)
#library(tidyr)
#library(readxl)
#library(readr)
#library(gridExtra)
#library(ggpubr)
#library(MASS)
#library(car)
#library(lmtest)
library(ggplot2)
###################################################################
file_path <- "../DATA/model_data_3_30.csv"
model_data <- read.csv(file_path)
#model_data <- read_csv("C:/Users/jacks/Documents/School/MATH_4530/MATH5530/OUTPUT/model_data_3_30.csv")
###################################################################
# Data Transformation
mod_model_data <- subset(model_data, model_data$HS_PLUS_percentage > 0.65)
df <- mod_model_data %>% select(
poverty_percentage,
HS_PLUS_percentage
)
#####################################################################
plot(mod_model_data$poverty_percentage, mod_model_data$HS_PLUS_percentage)
ggplot(mod_model_data, aes(x=poverty_percentage, y=HS_PLUS_percentage)) + geom_point() +
ggtitle("Poverty % vs. Educational Attainment %") +
xlab("Poverty %") +
ylab("Educational Attainment %")
#####################################################################
# Polynomial Regression
set.seed(100)
cv.poly <- rep(0,5)
for(i in 1:5){
poly_fit <- glm(HS_PLUS_percentage~poly(poverty_percentage, i), data = df)
cv.poly[i] <- cv.glm(df, poly_fit)$delta[1]
}
poly_ <- c(1,2,3,4,5)
plot(poly_, cv.poly)
set.seed(100)
library(fabricatr)
# Cubic spline df has # knots plus 4
cv.spline <- rep(0,10)
for(i in 5:14){
spline_fit <- glm(HS_PLUS_percentage~bs(poverty_percentage, df = i), data = df)
cv.spline[i-4] <- cv.glm(df, spline_fit)$delta[1]
}
spine_ <- c(1,2,3,4,5,6,7,8,9,10)
plot(spine_, cv.spline)
# Natrual Cubic spline df = # knots
cv.ns_spline <- rep(0,10)
for(i in 1:10){
ns_spline_fit <- glm(HS_PLUS_percentage~ns(poverty_percentage, df = i), data = df)
cv.ns_spline[i] <- cv.glm(df, ns_spline_fit)$delta[1]
}
spine_ <- c(1,2,3,4,5,6,7,8,9,10)
plot(spine_, cv.ns_spline)
smooth_spline_poverty_cv <- smooth.spline(poverty_percentage, HS_PLUS_percentage, cv=TRUE)
smooth_spline_chron_cv <- smooth.spline(mod_model_data$mean_chronic_absenteeism, mod_model_data$HS_PLUS_percentage, cv=TRUE)
# Smooth Spline
cv.smooth_spline <- rep(0,16)
for(i in 4:20){
smooth_fit <- smooth.spline(poverty_percentage, HS_PLUS_percentage, nknots = i)
cv.smooth_spline[i-3] <- smooth_fit$cv.crit
}
smooth_ <- c(4:20)
plot(smooth_, cv.smooth_spline)
cv.smooth_spline <- rep(0,16)
for(i in 4:20){
smooth_fit <- smooth.spline(poverty_percentage, HS_PLUS_percentage, nknots = i)
cv.smooth_spline[i-3] <- smooth_fit$cv.crit
}
attach(df)
smooth_spline_poverty_cv <- smooth.spline(poverty_percentage, HS_PLUS_percentage, cv=TRUE)
smooth_spline_chron_cv <- smooth.spline(mod_model_data$mean_chronic_absenteeism, mod_model_data$HS_PLUS_percentage, cv=TRUE)
# Smooth Spline
cv.smooth_spline <- rep(0,16)
for(i in 4:20){
smooth_fit <- smooth.spline(poverty_percentage, HS_PLUS_percentage, nknots = i)
cv.smooth_spline[i-3] <- smooth_fit$cv.crit
}
smooth_ <- c(4:20)
plot(smooth_, cv.smooth_spline)
attach(mod_model_data)
library(gam)
#library(gamclass)
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 12), data = mod_model_data)
#cv.gam <- CVgam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 12), data = mod_model_data, nfold = 10, debug.level = 0, method = "GCV.Cp",
#                printit = TRUE, cvparts = NULL, gamma = 1, seed = 29)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
#Use the test and train data partitions however you desire...
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 12), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
View(smooth_spline_poverty_cv)
View(smooth_spline_chron_cv)
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
library(gam)
#library(gamclass)
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
#cv.gam <- CVgam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 12), data = mod_model_data, nfold = 10, debug.level = 0, method = "GCV.Cp",
#                printit = TRUE, cvparts = NULL, gamma = 1, seed = 29)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
#Use the test and train data partitions however you desire...
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data, method="GCV.Cp")
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data, method = "GCV.Cp")
View(gam1)
mean(cv.gam)
cv.smooth_spline
knitr::opts_chunk$set(echo = TRUE)
dt <- data.table::data.table(
PolyDegree = poly_,
TestMSE = cv.poly
)
set.seed(100)
cv.poly <- rep(0,5)
for(i in 1:5){
poly_fit <- glm(HS_PLUS_percentage~poly(poverty_percentage, i), data = df)
cv.poly[i] <- cv.glm(df, poly_fit)$delta[1]
}
poly_ <- c(1,2,3,4,5)
dt <- data.table::data.table(
PolyDegree = poly_,
TestMSE = cv.poly
)
ggplot(dt, aes(x=PolyDegree, y=TestMSE)) + geom_point() +
ggtitle("Polynomial Regression: Poverty %") +
xlab("Polynomial Degree") +
ylab("Test MSE")
set.seed(100)
cv.poly <- rep(0,5)
for(i in 1:5){
poly_fit <- glm(HS_PLUS_percentage~poly(poverty_percentage, i), data = df)
cv.poly[i] <- cv.glm(df, poly_fit)$delta[1]
}
poly_ <- c(1,2,3,4,5)
dt <- data.table::data.table(
PolyDegree = poly_,
TestMSE = cv.poly
)
ggplot(dt, aes(x=PolyDegree, y=TestMSE)) + geom_point() +
ggtitle("Polynomial Regression: Poverty %") +
xlab("Polynomial Degree") +
ylab("Test MSE")
dt
# Cubic spline df has # knots plus 4
cv.spline <- rep(0,10)
for(i in 5:14){
spline_fit <- glm(HS_PLUS_percentage~bs(poverty_percentage, df = i), data = df)
cv.spline[i-4] <- cv.glm(df, spline_fit)$delta[1]
}
spine_ <- c(1,2,3,4,5,6,7,8,9,10)
dt <- data.table::data.table(
SplineDF = spine_,
TestMSE = cv.spline
)
ggplot(dt, aes(x=SplineDF, y=TestMSE)) + geom_point() +
ggtitle("Regression Spline: Poverty %") +
xlab("Degrees of Freedom (# Knots+4)") +
ylab("Test MSE")
dt
for(i in 4:14){
spline_fit <- glm(HS_PLUS_percentage~bs(poverty_percentage, df = i), data = df)
cv.spline[i-4] <- cv.glm(df, spline_fit)$delta[1]
}
# Cubic spline df has # knots plus 4
cv.spline <- rep(0,10)
for(i in 4:13){
spline_fit <- glm(HS_PLUS_percentage~bs(poverty_percentage, df = i), data = df)
cv.spline[i-3] <- cv.glm(df, spline_fit)$delta[1]
}
spine_ <- c(1,2,3,4,5,6,7,8,9,10)
dt_spline <- data.table::data.table(
SplineDF = spine_,
TestMSE = cv.spline
)
ggplot(dt_spline, aes(x=SplineDF, y=TestMSE)) + geom_point() +
ggtitle("Regression Spline: Poverty %") +
xlab("Degrees of Freedom (# Knots+4)") +
ylab("Test MSE")
dt_spline
# Cubic spline df has # knots plus 4
cv.spline <- rep(0,11)
for(i in 4:14){
spline_fit <- glm(HS_PLUS_percentage~bs(poverty_percentage, df = i), data = df)
cv.spline[i-3] <- cv.glm(df, spline_fit)$delta[1]
}
spine_ <- c(0,1,2,3,4,5,6,7,8,9,10)
dt_spline <- data.table::data.table(
SplineDF = spine_,
TestMSE = cv.spline
)
ggplot(dt_spline, aes(x=SplineDF, y=TestMSE)) + geom_point() +
ggtitle("Regression Spline: Poverty %") +
xlab("Degrees of Freedom (# Knots+4)") +
ylab("Test MSE")
dt_spline
cv.ns_spline <- rep(0,11)
for(i in 0:10){
ns_spline_fit <- glm(HS_PLUS_percentage~ns(poverty_percentage, df = i), data = df)
cv.ns_spline[i] <- cv.glm(df, ns_spline_fit)$delta[1]
}
# Natural Cubic spline df = # knots
cv.ns_spline <- rep(0,11)
for(i in 0:10){
ns_spline_fit <- glm(HS_PLUS_percentage~ns(poverty_percentage, df = i), data = df)
cv.ns_spline[i] <- cv.glm(df, ns_spline_fit)$delta[1]
}
spine_ <- c(0,1,2,3,4,5,6,7,8,9,10)
dt_ns_spline <- data.table::data.table(
NS_SplineDF = spine_,
TestMSE = cv.ns_spline
)
ggplot(dt_ns_spline, aes(x=NS_SplineDF, y=TestMSE)) + geom_point() +
ggtitle("Regression Natural Spline: Poverty %") +
xlab("Degrees of Freedom (# Knots)") +
ylab("Test MSE")
dt_ns_spline
# Natural Cubic spline df = # knots
cv.ns_spline <- rep(0,11)
for(i in 0:11){
ns_spline_fit <- glm(HS_PLUS_percentage~ns(poverty_percentage, df = i), data = df)
cv.ns_spline[i] <- cv.glm(df, ns_spline_fit)$delta[1]
}
spine_ <- c(0,1,2,3,4,5,6,7,8,9,10)
dt_ns_spline <- data.table::data.table(
NS_SplineDF = spine_,
TestMSE = cv.ns_spline
)
ggplot(dt_ns_spline, aes(x=NS_SplineDF, y=TestMSE)) + geom_point() +
ggtitle("Regression Natural Spline: Poverty %") +
xlab("Degrees of Freedom (# Knots)") +
ylab("Test MSE")
dt_ns_spline
attach(df)
# Smooth Spline
cv.smooth_spline <- rep(0,11)
for(i in 4:15){
smooth_fit <- smooth.spline(poverty_percentage, HS_PLUS_percentage, nknots = i)
cv.smooth_spline[i-3] <- smooth_fit$cv.crit
}
smooth_ <- c(4:15)
dt_ns_spline <- data.table::data.table(
Smooth_Knots = smooth_,
TestMSE = cv.smooth_spline
)
ggplot(dt_ns_spline, aes(x=Smooth_Knots, y=TestMSE)) + geom_point() +
ggtitle("Smooth Spline: Poverty %") +
xlab("# Knots") +
ylab("Test MSE")
dt_ns_spline
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = trainData)
#gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage)+s(mean_chronic_absenteeism), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
#gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = trainData)
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage)+s(mean_chronic_absenteeism), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
#gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = trainData)
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage)+s(mean_chronic_absenteeism), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
gam1 <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = mod_model_data)
#Randomly shuffle the data
df_gam <- mod_model_data[sample(nrow(mod_model_data)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(df_gam)),breaks=59,labels=FALSE)
cv.gam <- rep(0,59)
#Perform 10 fold cross validation
for(i in 1:59){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- df_gam[testIndexes, ]
trainData <- df_gam[-testIndexes, ]
#gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage,12)+s(mean_chronic_absenteeism, 5), data = trainData)
gam_temp <- gam(HS_PLUS_percentage~s(poverty_percentage)+s(mean_chronic_absenteeism), data = trainData)
pred <- predict(gam_temp, testData)
cv.gam[i] <- mean((pred - testData$HS_PLUS_percentage)^2)
}
print(mean(cv.gam))
